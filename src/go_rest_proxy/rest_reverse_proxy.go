package main

import (
	"context"
	"flag"
	"net/http"

	"github.com/golang/glog"
	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"google.golang.org/grpc/credentials"

	gw "github.com/thiagorobert/grpc-example/autogenerated_proto"
)

var (
	grpcServerEndpoint = flag.String(
		"grpc_endpoint",  "localhost:8080", "gRPC server endpoint")
	certPath = flag.String("cert_path", "", "path to certificate file")
)

// See https://github.com/olivere/grpc-example/blob/master/cmd/client/main.go
func getCred() credentials.TransportCredentials {
	cred := insecure.NewCredentials()
	var err error
	if *certPath != "" {
		serverNameOverride := ""
		cred, err = credentials.NewClientTLSFromFile(
			*certPath, serverNameOverride)
		if err != nil {
			glog.Fatal(err)
		}
	}
	return cred
}

func run() error {
	ctx := context.Background()
	ctx, cancel := context.WithCancel(ctx)
	defer cancel()

	// Register gRPC server endpoint
	// Note: Make sure the gRPC server is running properly and accessible
	mux := runtime.NewServeMux()
	opts := []grpc.DialOption{grpc.WithTransportCredentials(getCred())}
	err := gw.RegisterUnaryHandlerFromEndpoint(
		ctx, mux,  *grpcServerEndpoint, opts)
	if err != nil {
		return err
	}

	// Start HTTP server that proxies calls to gRPC server.
	return http.ListenAndServe(":8081", mux)
}

func main() {
	flag.Parse()
	defer glog.Flush()

	if err := run(); err != nil {
		glog.Fatal(err)
	}
}
